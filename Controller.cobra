use CommonData
use VariantMvc
use System

namespace GenericProject

class Controller<of TEnumParts> implements IControllerSpec<of TEnumParts>, IController<of TEnumParts> is abstract
	adds ManageProfiling

	def customBefore(args as ParsedCommand) is abstract
	def customAction(args as ParsedCommand) as Response is abstract
	def customAfter(args as ParsedCommand) is abstract
	
	def load is abstract
	
	def getDataForPart(part as TEnumParts) as SimpleData<of TEnumParts> is abstract
		
	event reachedLimit as LimitReachedHandler

	# roles:

	var _replayer as IRole= ManageLogReplay()
	var _historian as IRole= ManageHistory()
	var _resumer as IRole= ManagePersistence()
	
	var _opts = Options.None
	get roles from var as List<of IRole> 
	get views from var as List<of IView<of TEnumParts>> is protected
	
	def requestPartReload(part as TEnumParts)
		partData = .getDataForPart(part)
		.updateViewsPart(partData)
	
	def makePartsData as Dictionary<of TEnumParts, SimpleData<of TEnumParts>>
		dict = Dictionary<of TEnumParts, SimpleData<of TEnumParts>>()
		allParts = Enum.getValues(TEnumParts) to TEnumParts[]
		trace allParts.getType
		
		for enumEntry in allParts
			data = .getDataForPart(enumEntry)
			simple = SimpleData<of TEnumParts>(enumEntry,data)
			dict.add(enumEntry,simple)
			
		return dict
	
	def updateViews 
		dict = .makePartsData
		for k in dict.keys
			val = dict[k]
			.updateViewsPart(val)			
	
	def updateViewsPart(data as SimpleData<of TEnumParts>)
		for v in _views
			v.redrawPart(data)
		
	def requestReload
		.updateViews
		
	cue init(view as IView<of TEnumParts>)
		.init(view, Options.None)
		
	cue init(view as IView<of TEnumParts>, options as Options)
		base.init
		_opts = options
		.attachView(view)
		if Options.Profile in _opts
			listen .reachedLimit, ref .doSaveState
			
		_roles =  [ _replayer, _historian, _resumer ]
	
	def doSaveState
		pass
	
	def attachView(v1 as IView<of TEnumParts>)
		if not _views.contains(v1), _views.add(v1)

	def detachView(v1 as IView<of TEnumParts>)
		if _views.contains(v1), _views.remove(v1)
		
	def performAction(cmd as String) as Response
		assert Utils.isValidCommand(cmd)
	
		#ctrl = this to IControllerSpec
		parsed = Utils.parseCommand(cmd)
		lock this
			.beforeAction(parsed) # generic controller
			res = .customAction(parsed) # custom controller
			.afterAction(parsed) # generic controller
			return res
		
	def notifyViews(note as String)
		for v in _views, v.notify(note)
	
	def sendErrToViews(err as Response)
		for v in _views, v.showErr(err)
	


	def beforeAction(args as ParsedCommand)
		# .log(args.toString)
		if Options.Profile in _opts
			.recordProfile(args)
			
		#finally
		.customBefore(args)
		
		
	def afterAction(args as ParsedCommand)
		if Options.Profile in _opts
			.recordProfile(args)
			
		#finally
		.customAfter(args)
		
		