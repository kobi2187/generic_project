use VariantMvc
use Profiling

namespace GenericProject
sig LimitReachedHandler

mixin ManageProfiling
	"""
	ManagesProfiling, and optionally raises an event when threshold reached.
	"""

/#	test
		p = ManageProfiling()
		p.addElapsedMs("h",3)
		p.addElapsedMs("h",7)
		p.addElapsedMs("h",0.1)
		p.addElapsedMs("h",70)
		p.addElapsedMs("b",1500)
		
		assert p.totalSum == 1580.1
		assert p.totalCount == 5
		
		assert p.timeStats("h").high == 70
		assert p.timeStats("h").low == 0.1
		assert p.timeStats("h").count == 4
		assert p.timeStats("h").average == 80.1/4
		
#/	
	set cmdSumTimeLimit from _thresholdTimeSum as number 
	set cmdCountLimit from _thresholdCmdCount as uint64
	
	get totalCount from var as uint64 
	get totalSum from var as number
	var _profileDict = Dictionary<of String, Times>()
	pro stateSavingTime from var as Times
	
	event reachedLimit as LimitReachedHandler
	
		
	def addElapsed(cmd as String, elapsed as TimeSpan)
		ms = elapsed.totalMilliseconds to decimal
		.addElapsedMs(cmd, ms)

	def maybeReachLimit
		if .totalSum > _thresholdTimeSum or .totalCount > _thresholdCmdCount
			raise .reachedLimit
		
	def updateGlobalStats(elapsedMs as number)
		ensure
			_totalCount == old _totalCount + 1
			_totalSum >= old _totalSum
		body
			_totalCount += 1
			_totalSum += elapsedMs
			.maybeReachLimit
		
		
	var temp_store = Dictionary<of Guid, DateTime>()
	def getsetProfile(cmd as ParsedCommand) as number? is private
		"""uses the cmd's unique id, and a temporary hash with id as key."""
		res as number? = nil
		if .temp_store.containsKey(cmd.id)
			now = DateTime.now
			prev = .temp_store[cmd.id]
			ts = now.subtract(prev)
			res = ts.totalMilliseconds to number?
		else
			.temp_store.add(cmd.id,DateTime.now)
		return res

	def recordProfile(cmd as ParsedCommand)
		res = .getsetProfile(cmd) # could be entry or exit
		if res # if not nil
			.addElapsedMs(cmd.toString, res)
	

	def addElapsedMs(cmd as String, elapsedMs as number)
		require
			elapsedMs >= 0
		body
			cmd = cmd.trim
			.updateGlobalStats(elapsedMs)
			if not _profileDict.containsKey(cmd)
				times = Times(cmd)
				_profileDict.add(cmd, times)
			else # already has cmd
				t = _profileDict[cmd]
				t.addTime(elapsedMs)

	def reset
		_totalCount = 0
		_thresholdTimeSum = 0
		
	def timeStats(cmd as String) as Times?
		if _profileDict.containsKey(cmd)
			return _profileDict[cmd]
		else
			return nil

/# more helpers #/
	var prevs = Dictionary<of Guid, DateTime>
	
	def profileCmdExit(id as Guid) as TimeSpan
		return DateTime.now - prevs[id]
		
	def profileCmdEntry as Guid
		id = Guid.newGuid
		prevTime = DateTime.now
		prevs.add(id,prevTime)
		return id
	

	