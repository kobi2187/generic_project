namespace Profiling

class Profile
	"""
	ManagesProfiling, and optionally raises an event when threshold reached.
	"""

	test
		p = Profile()
		p.addElapsedMs("h",3)
		p.addElapsedMs("h",7)
		p.addElapsedMs("h",0.1)
		p.addElapsedMs("h",70)
		p.addElapsedMs("b",1500)
		
		assert p.totalSum == 1580.1
		assert p.totalCount == 5
		
		assert p.timeStats("h").high == 70
		assert p.timeStats("h").low == 0.1
		assert p.timeStats("h").count == 4
		assert p.timeStats("h").average == 80.1/4
		

	
	var _thresholdCmdCount as uint64
	var _thresholdTimeSum as number 
	
	get totalCount from var as uint64 
	get totalSum from var as number
	var _profileDict as Dictionary<of String, Times>
	pro _stateSavingTime from var as Times
	
	sig LimitReachedHandler
	event reachedLimit as LimitReachedHandler
		
	cue init
		base.init
		_profileDict = Dictionary<of String, Times>()
		_thresholdCmdCount = 50 # a default number: responsiveness, after how many commands to save a state.
		_thresholdTimeSum  = 200 # a default number: responsiveness, how long to wait for undo.
		_stateSavingTime = Times("saveState")
	
	cue init(thresholdCmdCount as uint64, thresholdTimeSum as number)
		.init
		_thresholdCmdCount, _thresholdTimeSum = thresholdCmdCount, thresholdTimeSum
	
	def addElapsed(cmd as String, elapsed as TimeSpan)
		ms = elapsed.totalMilliseconds to decimal
		.addElapsedMs(cmd, ms)

	def maybeReachLimit
		if .totalSum > _thresholdTimeSum or .totalCount > _thresholdCmdCount
			raise .reachedLimit
		
	def updateGlobalStats(elapsedMs as number)
		ensure
			_totalCount == old _totalCount + 1
			_totalSum >= old _totalSum
		body
			_totalCount += 1
			_totalSum += elapsedMs
			.maybeReachLimit
		
		
	def addElapsedMs(cmd as String, elapsedMs as number)
		require
			elapsedMs >= 0
		body
			cmd = cmd.trim
			.updateGlobalStats(elapsedMs)
			if not _profileDict.containsKey(cmd)
				times = Times(cmd)
				_profileDict.add(cmd, times)
			else # already has cmd
				t = _profileDict[cmd]
				t.addTime(elapsedMs)

	def reset
		_totalCount = 0
		_thresholdTimeSum = 0
		
	def timeStats(cmd as String) as Times?
		if _profileDict.containsKey(cmd)
			return _profileDict[cmd]
		else
			return nil
